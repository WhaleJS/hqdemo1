	Git是一个开源的分布式版本控制系统
	
	git init --> 首先初始化版本库
//	详细：就是创建一个仓库,然后项目里面会生成一个.git的隐藏文件（指仓库） ,且命令行里提示一个master，也就是代表仓库里面的主分支

	git status -->查看版本库的状态信息
//	详细：可以看到未被提交的文件 以红色字体显示  ，若出现modified:'xx'(则表示随时间修改的文件还未被提交到版本库)

	git add -->将未被提交的文件提交到暂存区 
//	详细：就是说，在提交版本前，可以把一些文件暂时存到一个特定的区域，add 后面指文件详细路径 若是 add.点，则代表当前目录，也就是全部文件。
//        若出现new file提示，则代表这是第一次跟踪次文件。

	git commit -m "自己添加的说明信息"--> 
//	详细：版本库说明信息（比如修改了什么/新增了什么，等等之类的信息） -m就是message

	git log --> 查看版本库的提交日志
//	详细：会显示是谁提交的，什么时候提交的

    git reflog --> 查看对版本库所有的操作
//     详细:可以查看到版本号（是16进制的）
-------------------------------------------------------------------------------------------------
注意事项：使用git呢，通常会是团队协作，因此，在拉取代码时，需得知道一些文件是谁提交的，或者是谁修改的。因此需要做一个全局配置(只做一次-包含用户名和邮箱)
		   配置完后，当 git -commit -m的时候，便可以知道是谁提交的或修改的
	使用如下两条命令
	git config --global user.name '小明'
	git config --global user.email xxxxx@qq.com
	
	
	
	GitHub基于git的代码托管平台，也可以叫（远程仓库）--可以托管代码，方便随时随地拉取上传
	
	1.注册+登录
	2.配置SSHkey(用于账户权限认证)
	a.$ ssh-keygen -t rsa -C "your_email@youremail.com" -- > 生成公私钥密码对
//	详细:（保存在C盘 .rsa是私钥文件-无需公开  。rsa_pub是公钥文件）  并且在git命令行内可以设置密码

	b.生成以后，要在github上去做配置,进入个人选项--> seetings  -- > SSH and GPG --> New SSHKey  --> 输入title与key（title可以自己取）
	
	c.$ ssh -T git@github.com --> 用于测试是否可以通过此方式连接到git账户
//	详细：此条命令无需修改

	接下来
	本地资源上传到github服务器   说明：【项目可以添加自述文件-Readme.md】
	1.在github上new一个新的仓库
//	详细:github提供四种填充版本库的的方法,1.客户端可视化界面的方法2.通过命令行方式创建3.通过import（在另一个版本库导入）4.通过命令行推送一个已经存在的版本库

	2.将本地仓库和github远程仓库建立连接 --> 采用第四种方法   注意:github上要是ssh形式不是https
	详细:复制两段代码至命令行
	git remote add origin git@github.com:WhaleJS/hqdemo1.git
	git push -u origin master
	
	3.git push --> 将本地的代码资源推送到远程仓库
	
	
	git实际开发工作流程
	第一步：git clone 需要克隆仓库的URL ,克隆远程仓库  ,在一个新的文件夹内 打开git命令窗 使用git clone
	第二步: 工作内容
	第三步：git add .
	第四步：git commit -m ''
	第五步：git push
	
	//
	git上面源码转化为页面效果
	http://htmlpreview.github.com/?(固体格式) + https://github.com/WhaleJS/hqdemo1/blob/master/index.html(github上的文件代码地址)
	

//	SVN版本控制系统
	repository --版本库(源代码库)
	Checkout --检出(下载)
	Commit --提交(上传)
	Update --更新
	
	步骤:
	服务端
	1.打开SVN视图管理器 --> user --> create user(创建一个用户) Yan 123(用户名-密码)
	2.可选-->(Groups)分组,可以把不同的人员分类到不同的组以用于同一模板工作.---创建组名后,add添加成员
	3.创建代码仓库 Create new Repository
	4.TortoiseSVN --> import (将项目导入到SVN版本库)
	---------------------------------------------------------
	客户端
	1.新建项目文件夹 --> 在SVN上面检出服务器端项目.一般是检出最新 
	2.在文件中进行代码编写
	3.若果文件出现红色感叹号,说明文件被修改了还未被上传
	4.内容完成,把文件上传到SVN服务器-->commit(提交时,可以附注备注信息),此时版本号也随着更改
	5.Update更新内容
	6.若commit时出现了报错(此时自己的项目出现几个不同版本的文件),可以点击弹窗的show log日志查看详情 --> Mine代表自己的文件  Merged代表合并后的文件   点击save保存
	
	
============================================================================================================================================


	[Node.js相关API]
	
	模块暴露--遵循common.Js规范
	ES5:(module.exports) --> 暴露  (require) --> 接收   ES6: (export) --> 暴露  (import) --> 接收
	
	1.supervisor --> 自动监视文件修改,重复启动服务-无需像node server一样一直手动重启
//	   详细:npm i supervisor -g
	
	2.npm init -y --> 生成package.json文件 package.json是(项目的配置信息)
//    详细: npm start(也可以是npm run start) 其实执行的就是package,json里面的'script'对象属性里面的'start'属性的值
	
	node--路由
//	详细:根据用户请求的参数传回或跳转到相应的页面(url),说白了就是路径
	
	附注:Buffer --> 缓冲区(储存一些数据)
	第三方库:cheerio(用于服务器端处理字符串,和 jQuery(DOM)是类似的.不过cheerio是基于string处理方式,node.js里面没有DOM)
