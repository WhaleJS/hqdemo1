	Git是一个开源的分布式版本控制系统
	
	git init --> 首先初始化版本库
//	详细：就是创建一个仓库,然后项目里面会生成一个.git的隐藏文件（指仓库） ,且命令行里提示一个master，也就是代表仓库里面的主分支

	git status -->查看版本库的状态信息
//	详细：可以看到未被提交的文件 以红色字体显示  ，若出现modified:'xx'(则表示随时间修改的文件还未被提交到版本库)

	git add -->将未被提交的文件提交到暂存区 
//	详细：就是说，在提交版本前，可以把一些文件暂时存到一个特定的区域，add 后面指文件详细路径 若是 add.点，则代表当前目录，也就是全部文件。
//        若出现new file提示，则代表这是第一次跟踪次文件。

	git commit -m "自己添加的说明信息"--> 
//	详细：版本库说明信息（比如修改了什么/新增了什么，等等之类的信息） -m就是message

	git log --> 查看版本库的提交日志
//	详细：会显示是谁提交的，什么时候提交的

    git reflog --> 查看对版本库所有的操作
//     详细:可以查看到版本号（是16进制的）
-------------------------------------------------------------------------------------------------
注意事项：使用git呢，通常会是团队协作，因此，在拉取代码时，需得知道一些文件是谁提交的，或者是谁修改的。因此需要做一个全局配置(只做一次-包含用户名和邮箱)
		   配置完后，当 git -commit -m的时候，便可以知道是谁提交的或修改的
	使用如下两条命令
	git config --global user.name '小明'
	git config --global user.email xxxxx@qq.com
	
	
	
	GitHub基于git的代码托管平台，也可以叫（远程仓库）--可以托管代码，方便随时随地拉取上传
	
	1.注册+登录
	2.配置SSHkey(用于账户权限认证)
	a.$ ssh-keygen -t rsa -C "your_email@youremail.com" -- > 生成公私钥密码对
//	详细:（保存在C盘 .rsa是私钥文件-无需公开  。rsa_pub是公钥文件）  并且在git命令行内可以设置密码

	b.生成以后，要在github上去做配置,进入个人选项--> seetings  -- > SSH and GPG --> New SSHKey  --> 输入title与key（title可以自己取）
	
	c.$ ssh -T git@github.com --> 用于测试是否可以通过此方式连接到git账户
//	详细：此条命令无需修改

	接下来
	本地资源上传到github服务器   说明：【项目可以添加自述文件-Readme.md】
	1.在github上new一个新的仓库
//	详细:github提供四种填充版本库的的方法,1.客户端可视化界面的方法2.通过命令行方式创建3.通过import（在另一个版本库导入）4.通过命令行推送一个已经存在的版本库

	2.将本地仓库和github远程仓库建立连接 --> 采用第四种方法   注意:github上要是ssh形式不是https
	详细:复制两段代码至命令行
	git remote add origin git@github.com:WhaleJS/hqdemo1.git
	git push -u origin master
	
	3.git push --> 将本地的代码资源推送到远程仓库
	
	
	git实际开发工作流程
	第一步：git clone 需要克隆仓库的URL ,克隆远程仓库  ,在一个新的文件夹内 打开git命令窗 使用git clone
	第二步: 工作内容
	第三步：git add .
	第四步：git commit -m ''
	第五步：git push
	
	//
	git上面源码转化为页面效果
	http://htmlpreview.github.com/?(固体格式) + https://github.com/WhaleJS/hqdemo1/blob/master/index.html(github上的文件代码地址)
	

//	SVN版本控制系统
	repository --版本库(源代码库)
	Checkout --检出(下载)
	Commit --提交(上传)
	Update --更新
	
	步骤:
	服务端
	1.打开SVN视图管理器 --> user --> create user(创建一个用户) Yan 123(用户名-密码)
	2.可选-->(Groups)分组,可以把不同的人员分类到不同的组以用于同一模板工作.---创建组名后,add添加成员
	3.创建代码仓库 Create new Repository
	4.TortoiseSVN --> import (将项目导入到SVN版本库)
	---------------------------------------------------------
	客户端
	1.新建项目文件夹 --> 在SVN上面检出服务器端项目.一般是检出最新 
	2.在文件中进行代码编写
	3.若果文件出现红色感叹号,说明文件被修改了还未被上传
	4.内容完成,把文件上传到SVN服务器-->commit(提交时,可以附注备注信息),此时版本号也随着更改
	5.Update更新内容
	6.若commit时出现了报错(此时自己的项目出现几个不同版本的文件),可以点击弹窗的show log日志查看详情 --> Mine代表自己的文件  Merged代表合并后的文件   点击save保存
	
	
============================================================================================================================================

	Node.js
	
	
//	说明
	安装Node的时候就已经把npm安装了,通过npm init安装node_modules  npm相当于菜市场,node_modules相当于菜篮,里面放的全是菜(例如各种js和插件模块),在项目里面通过npm i --save 插件名
	去安装需要用到的插件模块  然后定义变量 --> require导入这个模块即可使用

	[Node.js相关API]  Node环境下没有window对象  只是global对象 如同小程序
	
	模块暴露--遵循common.Js规范
	ES5:(module.exports) --> 暴露  (require) --> 接收   ES6: (export) --> 暴露  (import) --> 接收
	
	1.supervisor --> 自动监视文件修改,重复启动服务-无需像node server一样一直手动重启
//	   详细:npm i supervisor -g
	
	2.npm init -y --> 生成package.json文件 package.json是(项目的配置信息)
//    详细: npm start(也可以是npm run start) 其实执行的就是package,json里面的'script'对象属性里面的'start'属性的值
	
	node--路由
//	详细:根据用户请求的参数传回或跳转到相应的页面(url),说白了就是路径
	
	附注:Buffer --> 缓冲区(储存一些数据)
	第三方库:cheerio(用于服务器端处理字符串,和 jQuery(DOM)是类似的.不过cheerio是基于string处理方式,node.js里面没有DOM)
	
	
	
	Express
	
	
//	重点 Node(express) + mongoDB + mongoose搭建简易后台
	Node.js的express脚手架 --> 用于快速搭建web应用
	express(基于Node.js的web开发框架 --> 相当于js和jquery的关系)
	1.npm i --save express --> 配置express环境
	
	2.配置静态资源路径
	调用use()方法  app.use(express.static('指定的文件夹'))  app是express的一个实例
	
	3.post && get 请求参数处理
		get:req.query.xxx
		post:默认情况下,express不会处理post请求的参数,需要增加额外的插件来处理 body-parser npm i --save body-parser  (后台在post请求里面用req.body即可查看前台返回的数据)
		app.use(bodyparser.urlencoded({extended:true})) --> 处理form表单格式提交的数据
		app.use(bodyparser.json())-->处理json格式的数据
		
	4.在浏览器输出chrome://flags/#enable-devtools-experiments, 并改为启用   --> 在项目中输入 node --inspect 项目名,接下来在浏览器中就出现了Node.js的debug调试工具,此工具和自动重启工具supervisor会启冲突,只能用一个	 
	
	5.通过mongoose连接数据库   npm i --save mongoose@4 @4(表示版本)	  mongoose(mongoDB的第三方库) mongoose封装了mongoDB数据库的所有操作方法
	a.schema-->数据库的映射(相当于镜像)  不具备数据库操作能力
	
	
	
	
	MongoDB
	
	==================================================================
	
	关系型数据库  mysql  oracel (表与表之间有严格的关系)比如学生名字和ID为一表  ID和成绩为一表 两张表就建立了关系  [.较为复杂  .不可拆分]
	非关系型数据库 Mongo  CouchDB 类似json格式的数据,储存内容是文档性.其目的为web应用提供高性能的数据接口  优点:[.可拆分 .可扩展 .无复杂关系] 缺点:没有标准化
	
	MongoDB --> 数据结构由有键值对组成  key => value,其数据是存在一个文档中(类json)
	表格(Mysq) --> 集合(Mong)  行(Mysq) --> 文档(Mong)  列(Mysq)  --> 字段(Mong)  表联合(Mysq)  --> 嵌套文档(Mong)
	
	MongoDB安装与配置!
	MongoDB 安装目录 --> C:\Program Files\MongoDB\Server\3.4\
	
	
	配置项 (端口也可配置)
	1.找一个盘符 创建一个文件夹(data)
	2.在data里面放三个文件 db(用于存放数据库) conf dbConf
	3.在conf里面创建一个mongo.conf文件,并将mongo.conf在编辑器内做修改.第一设置dbpath:xxx路径(表示数据库存放位置) 第二:设置logpath:xxx路径(表示日志的路径)
	4.在dbConf里面创建mongodb.log文件(也就是日志文件)
	
	5.在数据库安装目录下 找到bin目录(mongodb的配置和命令信息)  创建一个 start.bat文件-->.bat是命令文件
	6.修改start.bat文件 输入mongod -f(此命令会运行mongo.exe数据程序) -f是指定了运行文件的路径
	7.start.bat命令启动后小化窗口 --> 点击mongo.exe运行数据库
	
	-------------------------------------------------------------------
	
	[mongoDB命令]-->注意:books可随意命名,这是集合名
	
	1.show dbs --> 查看有多少数据库
	
	2.use  数据库名字  --> 新建数据库 如果检查到有的话就切换(switch表示切换+ed表示切换成功),没有的话就是创建.
//	附注:创建完后,使用show dbs查询,发现没有显示此数据库,原因是数据库没有数据.
	
	
	3.插入数据 --> db.books.insert({name:'小王',address:'成都'})  books表示集合名亦为一条数据
	
	4.查询数据 --> db.books.find(可以传参数) 
	
	5.修改/更新数据 --> db.books.update({name:"小红"},{$set:{name:"小明"}})  第一个参数为查询对象 || 第二个则为修改对象 $set的意思是如果有这个属性就修改,没有则添加 
	详细:数据库命令行提示:nMatched:1-->表示匹配到一个  nUpserted:0 --> 表示是否是新增的  nModified:1 --> 表示更新成功
	
	6.删除数据 --> db.books.remove({},1/true)第一个参数也是查询对象,就是删除谁的意思 ,不传第二个参数,则会删除所有相关的数据|| 第二个参数表示删除第一个
	
	7.删除数据库 --> db.dropDatabase()
	
	8.删除集合名称 --> db.集合名字.drop() --> 返回true
	
	9.查看当前数据库有哪些集合	--> show collections
	
	10.复杂查询示例
	 a.条件查询 db.books.find({name:"北京"}) 
	 b.条件查询 大于 $gt  小于$lt  大于等于$gte  小于等于lgte 
	 示例 --> db.books.find({age:{$gt:18}})
	 c.双重筛选(比如我根据条件筛选出5条,我只想要2两条) --> db.books.find({age:{$gt:18}}).limit(2) 跟上.limit(参数为想要返回多少条数)
	 D.跳过上一次查询完的数据 --> skip(参数可选跳过多少条)方法 db.books.find({age:{$gt:18}}).skip(1).limit(2)  --> 可做分页功能
	 
	 排序
	 db.books.find().sort({age:-1}) 1:升序  -1:降序
	 
	 索引
	 ensureIndex({index:1}) 修改数据相对应的id 通常mongoDB已经自动为数据添加id
	 
	 
	Websocket 
	
	==============================================================
	websocket
	概念:websocket是HTML5新增的协议  
	1.基于TCP协议(两者建立连接,且一直连接,除非一方主动断开)
	2.由通信协议和编程API组成.
	3.在浏览器和服务器之间建立双向连接 实现双向通信
	4.基于事件的方式(监听)
	附注:双向通信-->意味着websokect不像http请求那样单方面的req-->res请求响应,而是客户端和服务端可以同时发送并相应请求
	
//	先导入ws模块(npm i --save ws) ws启动的是websocket服务  var websocket = require('ws')
	socket--API
	1.前台 var ws = new WebScoket('ws://127.0.0.1:端口')
	2.API 
	a.open -- Socket,onopen 连接时触发
	b.message -- Socket.onmessage 客户端接收服务端数据时触发
	c.error -- Scoketonerror 通信错误时触发
	d.close -- Socketonclose 连接关闭时候触发
	
	方法:Socket.send()-使用连接发送数据 Socket.close() 关闭连接
	
//	socket第三方库
	socket.io.js//-客户端和服务端都可以用  socket.io相当于js和jq  优点:比如要使用websocket给所有人发信息,原生的socket办不到,只能用socket.io
	用法:
	1.安装socket.io:npm i --save socket.io  安装以后,会在项目里面注入一个socket.io文件,文件里面有个socket.io.js.我们可以通过script标签引入
//	注意:socket.io依赖原生http协议,需要在项目中导入
	












	npm install moduleName # 安装模块到项目目录下
 
	npm install -g moduleName # -g 的意思是将模块安装到全局，具体安装到磁盘哪个位置，要看 npm config prefix 的位置。
 
	npm install -save moduleName # -save 的意思是将模块安装到项目目录下，并在package文件的dependencies节点写入依赖。
 
	npm install -save-dev moduleName # -save-dev 的意思是将模块安装到项目目录下，并在package文件的devDependencies节点写入依赖。
	
//	总结
	devDependencies 节点下的模块是我们在开发时需要用的，比如项目中使用的 gulp ，压缩css、js的模块。这些模块在我们的项目部署后是不需要的，
	所以我们可以使用 -save-dev 的形式安装。像 express 这些模块是项目运行必备的，应该安装在 dependencies 节点下，所以我们应该使用 -save 的形式安装。
	









//webpack --配置很繁琐
概念:web开发的模块打包工具(js、css、img等打包成各种模块 然后引入模块)
//优点
1.分析项目结构  2.处理js的模块依赖关系  3.将浏览不能识别的语法如sass,less等打包成浏览器能识别的格式

工作流程:
1.把项目看做一个整体  --> 通过一个给定的一个主js文件(被称为入口文件) 从这个主文件就可以找到所有依赖的模块 使用loader来处理这些文件

安装流程
1.全局安装  npm i -g webpack  --> 选择安装版本 npm i -g webpack@版本号